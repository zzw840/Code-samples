	/** Q: Given an array of points with coordinates (x, y) where x and y are both integers, return the straight line 
	 *  that has cross the largest amount of points. 
	 *	
	 * Time O(n^2), where n is the number of points, Space O(n^2) worst: at most n(n-1)/2 lines.
 	 *
 	 * Solution:
 	 */
 
  	/* To return the straight line with the largest number of points */
	public Set<Point> lineWithLargestNumPoints(Point[] input) {		
		Map<Pair<Double>, Set<Point>> lines = new HashMap<>();
		pointToLine(input, lines);
		int curMax = 0;
		Set<Point> maxSizeSet = new HashSet<>();
		for (Set<Point> set : lines.values()) {
			curMax = Math.max(set.size(), curMax);
			if (set.size() > curMax) {
				maxSizeSet = set;
			 }
		}
		return maxSizeSet;
	}
	
	private void pointToLine(Point[] input, Map<Pair<Double>, Set<Point>> lines) {
		int length = input.length;
		for (int i = 0; i < length; i++) {
			for (int j = i + 1; j < length; j++) {
				if (input[j].x == input[i].x) {
					Pair<Double> pair = new Pair((double) input[j].x, 0);
					if (lines.keySet().contains(pair)) {
						lines.get(pair).add(input[j]);
					} else {
						Set<Point> newLine = new HashSet<>();
						newLine.add(input[j]);
						lines.put(new Pair((double) input[j].x, 0), newLine);
					}
				} else {
					double a = (double) (input[j].y - input[i].y) / (double) (input[j].x - input[i].x);
					double b = (double) (input[j].y - input[j].x * a);
					if (lines.keySet().contains(new Pair(a, b))) {
						lines.get(new Pair(a, b)).add(input[j]);
					} else {
						Set<Point> newLine = new HashSet<>();
						newLine.add(input[j]);
						lines.put(new Pair(a, b), newLine);
					}
				}
			}
		}
	}
	
	public static class Point {
		public int x;
		public int y;
	}
	
	class Pair<Double> {
		double a;
		double b;
		public Pair(double a, double b) {
			this.a = a;
			this.b = b;
		}
	}
